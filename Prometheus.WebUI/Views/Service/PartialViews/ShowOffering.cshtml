@using Common.Dto
@using Common.Enums.Entities
@model dynamic


    @foreach (var property in ViewData.ModelMetadata.Properties)
		{
			if (property.Model == null)
			{
				continue;
			}

			switch (property.PropertyName)
			{
				case "Id":  /*do nothing for these attributes */
				case "ServiceId":
				case "ServiceOptionId":
				case "DateCreated":
				case "DateUpdated":
				case "CreatedByUserId":
				case "UpdatedByUserId":
				case "PictureMimeType":
				case "Popularity":
				case "Picture":
				case "TextInputs":
				case "ScriptedSelectionInputs":
				case "SelectionInputs":


				continue;
			}

		<div class="dd-row">
            <div class="dt-cell">@(property.DisplayName ?? property.PropertyName)</div>


			@switch (property.PropertyName)
	{
                case "CategoryId":
                    <div class="dd-cell">
                    </div>    break;
                case "Cost":
                case "PriceUpFront":
                case "PriceMonthly":
                    <div class="dd-cell">
                        @($"${property.Model:0.00}")
                    </div>    break;
                case "Description":
                case "BusinessValue":
                    <div class="dd-cell">
                        @Html.Raw(property.Model)
                    </div>    break;
                case "ServiceOptions":
                    var options = (IEnumerable<IServiceOptionDto>)property.Model;
                    if (options != null)
                    {
                        foreach (var option in options)
                        {
                            <div>@Html.ActionLink(option.Name, "ShowServiceOption", new { id = option.Id })</div>}
						}
                    break;
                default:
                    <div class="dd-cell">@Html.Raw(property.Model)</div>    break;
            }
        </div>
    }